name: Backend Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - 'shared/**'
      - 'package.json'
      - 'tsconfig.json'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - 'shared/**'
      - 'package.json'
      - 'tsconfig.json'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - performance
          - security

jobs:
  # Unit Tests
  unit-tests:
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == ''
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test
          LOG_LEVEL: error

      - name: Upload unit test coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./reports/coverage/lcov.info
          flags: unit
          name: unit-tests

  # Integration Tests
  integration-tests:
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == ''
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: chugr_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for services
        run: |
          npx wait-port localhost:5433
          npx wait-port localhost:6380

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          LOG_LEVEL: error
          POSTGRES_URL: postgresql://test_user:test_password@localhost:5433/chugr_test
          REDIS_URL: redis://localhost:6380

      - name: Upload integration test coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./reports/coverage/lcov.info
          flags: integration
          name: integration-tests

  # End-to-End Tests
  e2e-tests:
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'e2e' || github.event.inputs.test_type == ''
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: chugr_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: test_access_key
          MINIO_ROOT_PASSWORD: test_secret_key
        ports:
          - 9001:9000
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for services
        run: |
          npx wait-port localhost:5433
          npx wait-port localhost:6380
          npx wait-port localhost:9001

      - name: Start API Gateway
        run: |
          cd ../backend/api-gateway
          npm ci
          npm run build
          npm start &
          npx wait-port localhost:3000

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          LOG_LEVEL: error
          API_GATEWAY_URL: http://localhost:3000
          POSTGRES_URL: postgresql://test_user:test_password@localhost:5433/chugr_test
          REDIS_URL: redis://localhost:6380

      - name: Upload E2E test coverage
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: ./reports/coverage/lcov.info
          flags: e2e
          name: e2e-tests

  # Performance Tests
  performance-tests:
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == ''
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start test infrastructure
        run: docker-compose up -d

      - name: Wait for services
        run: |
          npx wait-port localhost:3000
          npx wait-port localhost:5433
          npx wait-port localhost:6380

      - name: Run performance tests
        run: npm run test:performance
        env:
          NODE_ENV: test

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-reports
          path: reports/performance/

      - name: Cleanup
        if: always()
        run: docker-compose down

  # Security Tests
  security-tests:
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'security' || github.event.inputs.test_type == ''
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: chugr_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for services
        run: |
          npx wait-port localhost:5433
          npx wait-port localhost:6380

      - name: Run security tests
        run: npm run test:security
        env:
          NODE_ENV: test
          LOG_LEVEL: error
          POSTGRES_URL: postgresql://test_user:test_password@localhost:5433/chugr_test
          REDIS_URL: redis://localhost:6380

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: reports/security/

  # Test Summary
  test-summary:
    if: always()
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, security-tests]
    runs-on: ubuntu-latest

    steps:
      - name: Test Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result }} |" >> $GITHUB_STEP_SUMMARY
